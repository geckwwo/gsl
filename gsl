#!/usr/bin/python3
import sys
import os
import traceback

from lang.front.lexer import Lexer
from lang.front.parser import Parser
from lang.middle.ir import IRGenerator
from lang.back.azureleaf import AzureLeafCompiler
from lang.vm.vm import AzureLeafExecutor, AzureLeafScopedExecutionContext

def tokenize(src: str):
    l = Lexer()
    try:
        return None, l, l.run(src)
    except Exception as e:
        traceback.print_exception(e)
        return e, l, None

def parse(tokens):
    l = Parser()
    try:
        return None, l, l.run(tokens)
    except Exception as e:
        traceback.print_exception(e)
        return e, l, None

def generate_ir(ast):
    l = IRGenerator()
    try:
        return None, l, l.run(ast)
    except Exception as e:
        traceback.print_exception(e)
        return e, l, None

def compile_azureleaf(ir):
    l = AzureLeafCompiler()
    try:
        return None, l, l.run(ir)
    except Exception as e:
        traceback.print_exception(e)
        return e, l, None

if __name__ == "__main__":
    DEBUG = False

    source = open(sys.argv[1]).read()
    tokens = Lexer().run(source)
    ast = Parser().run(tokens)
    if DEBUG:
        print(ast)
    ir = IRGenerator().run(ast)
    if DEBUG:
        print(ir)
    azureleaf = AzureLeafCompiler().run(ir)
    if DEBUG:
        print(azureleaf)
    x = AzureLeafScopedExecutionContext(azureleaf.name, azureleaf.body)
    e = AzureLeafExecutor({"print": lambda ctx, exec, *stuff: print(*stuff)})
    e.push_context(x, azureleaf.args, ())
    while e.tick():
        pass